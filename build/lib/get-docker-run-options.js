var _require = require('child_process');

const execSync = _require.execSync;

const sample = ['-a, ', '--attach value                '];
const R = require('ramda');

const _slices = (params, data) => params.map(p => data.slice(...p));
const slices = R.curry(_slices);
const removeWhitespaceItems = R.reject(R.pipe(R.trim, R.isEmpty));

const ifNothingElse = value => R.ifElse(R.isNil, R.always(value), R.identity);
const notNil = R.complement(R.isNil);
const hasIndex = R.curry(R.pipe(R.nth, notNil));

const getOptions = () => R.pipe(R.toString, R.split('Options:\n'), R.nth(1), R.split('\n'), R.reject(R.isEmpty), R.map(R.pipe(slices([[3, 4], [6, 36], [36]]), R.over(R.lensIndex(1), R.pipe(R.trim, R.split(' '), R.unless(hasIndex(1), R.append('boolean')))), R.flatten, R.zipObj(['alias', 'name', 'type', 'description']), R.over(R.lensProp('alias'), R.pipe(R.of, removeWhitespaceItems)), R.over(R.lensProp('name'), R.slice(2, R.Infinity)), R.converge(R.objOf, [R.prop('name'), R.omit('name')]))), R.mergeAll)(execSync('docker run --help'));

module.exports = getOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZ2V0LWRvY2tlci1ydW4tb3B0aW9ucy5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiZXhlY1N5bmMiLCJzYW1wbGUiLCJSIiwiX3NsaWNlcyIsInBhcmFtcyIsImRhdGEiLCJtYXAiLCJwIiwic2xpY2UiLCJzbGljZXMiLCJjdXJyeSIsInJlbW92ZVdoaXRlc3BhY2VJdGVtcyIsInJlamVjdCIsInBpcGUiLCJ0cmltIiwiaXNFbXB0eSIsImlmTm90aGluZ0Vsc2UiLCJ2YWx1ZSIsImlmRWxzZSIsImlzTmlsIiwiYWx3YXlzIiwiaWRlbnRpdHkiLCJub3ROaWwiLCJjb21wbGVtZW50IiwiaGFzSW5kZXgiLCJudGgiLCJnZXRPcHRpb25zIiwidG9TdHJpbmciLCJzcGxpdCIsIm92ZXIiLCJsZW5zSW5kZXgiLCJ1bmxlc3MiLCJhcHBlbmQiLCJmbGF0dGVuIiwiemlwT2JqIiwibGVuc1Byb3AiLCJvZiIsIkluZmluaXR5IiwiY29udmVyZ2UiLCJvYmpPZiIsInByb3AiLCJvbWl0IiwibWVyZ2VBbGwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiZUFBbUJBLFFBQVEsZUFBUixDOztNQUFaQyxRLFlBQUFBLFE7O0FBQ1AsTUFBTUMsU0FBUyxDQUFDLE1BQUQsRUFBUyxnQ0FBVCxDQUFmO0FBQ0EsTUFBTUMsSUFBSUgsUUFBUSxPQUFSLENBQVY7O0FBRUEsTUFBTUksVUFBVSxDQUFDQyxNQUFELEVBQVNDLElBQVQsS0FBa0JELE9BQU9FLEdBQVAsQ0FBV0MsS0FBS0YsS0FBS0csS0FBTCxDQUFXLEdBQUdELENBQWQsQ0FBaEIsQ0FBbEM7QUFDQSxNQUFNRSxTQUFTUCxFQUFFUSxLQUFGLENBQVFQLE9BQVIsQ0FBZjtBQUNBLE1BQU1RLHdCQUF3QlQsRUFBRVUsTUFBRixDQUFTVixFQUFFVyxJQUFGLENBQU9YLEVBQUVZLElBQVQsRUFBZVosRUFBRWEsT0FBakIsQ0FBVCxDQUE5Qjs7QUFFQSxNQUFNQyxnQkFBZ0JDLFNBQVNmLEVBQUVnQixNQUFGLENBQVNoQixFQUFFaUIsS0FBWCxFQUFrQmpCLEVBQUVrQixNQUFGLENBQVNILEtBQVQsQ0FBbEIsRUFBbUNmLEVBQUVtQixRQUFyQyxDQUEvQjtBQUNBLE1BQU1DLFNBQVNwQixFQUFFcUIsVUFBRixDQUFhckIsRUFBRWlCLEtBQWYsQ0FBZjtBQUNBLE1BQU1LLFdBQVd0QixFQUFFUSxLQUFGLENBQVFSLEVBQUVXLElBQUYsQ0FBT1gsRUFBRXVCLEdBQVQsRUFBY0gsTUFBZCxDQUFSLENBQWpCOztBQUVBLE1BQU1JLGFBQWEsTUFBTXhCLEVBQUVXLElBQUYsQ0FDdkJYLEVBQUV5QixRQURxQixFQUV2QnpCLEVBQUUwQixLQUFGLENBQVEsWUFBUixDQUZ1QixFQUd2QjFCLEVBQUV1QixHQUFGLENBQU0sQ0FBTixDQUh1QixFQUl2QnZCLEVBQUUwQixLQUFGLENBQVEsSUFBUixDQUp1QixFQUt2QjFCLEVBQUVVLE1BQUYsQ0FBU1YsRUFBRWEsT0FBWCxDQUx1QixFQU12QmIsRUFBRUksR0FBRixDQUFNSixFQUFFVyxJQUFGLENBQ0pKLE9BQU8sQ0FBQyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQUQsRUFBUyxDQUFDLENBQUQsRUFBSSxFQUFKLENBQVQsRUFBa0IsQ0FBQyxFQUFELENBQWxCLENBQVAsQ0FESSxFQUVKUCxFQUFFMkIsSUFBRixDQUNFM0IsRUFBRTRCLFNBQUYsQ0FBWSxDQUFaLENBREYsRUFFRTVCLEVBQUVXLElBQUYsQ0FDRVgsRUFBRVksSUFESixFQUVFWixFQUFFMEIsS0FBRixDQUFRLEdBQVIsQ0FGRixFQUdFMUIsRUFBRTZCLE1BQUYsQ0FBU1AsU0FBUyxDQUFULENBQVQsRUFBc0J0QixFQUFFOEIsTUFBRixDQUFTLFNBQVQsQ0FBdEIsQ0FIRixDQUZGLENBRkksRUFVSjlCLEVBQUUrQixPQVZFLEVBV0ovQixFQUFFZ0MsTUFBRixDQUFTLENBQUMsT0FBRCxFQUFVLE1BQVYsRUFBa0IsTUFBbEIsRUFBMEIsYUFBMUIsQ0FBVCxDQVhJLEVBWUpoQyxFQUFFMkIsSUFBRixDQUFPM0IsRUFBRWlDLFFBQUYsQ0FBVyxPQUFYLENBQVAsRUFBNEJqQyxFQUFFVyxJQUFGLENBQU9YLEVBQUVrQyxFQUFULEVBQWF6QixxQkFBYixDQUE1QixDQVpJLEVBYUpULEVBQUUyQixJQUFGLENBQU8zQixFQUFFaUMsUUFBRixDQUFXLE1BQVgsQ0FBUCxFQUEyQmpDLEVBQUVNLEtBQUYsQ0FBUSxDQUFSLEVBQVdOLEVBQUVtQyxRQUFiLENBQTNCLENBYkksRUFjSm5DLEVBQUVvQyxRQUFGLENBQVdwQyxFQUFFcUMsS0FBYixFQUFvQixDQUFDckMsRUFBRXNDLElBQUYsQ0FBTyxNQUFQLENBQUQsRUFBaUJ0QyxFQUFFdUMsSUFBRixDQUFPLE1BQVAsQ0FBakIsQ0FBcEIsQ0FkSSxDQUFOLENBTnVCLEVBc0J2QnZDLEVBQUV3QyxRQXRCcUIsRUF1QnZCMUMsU0FBUyxtQkFBVCxDQXZCdUIsQ0FBekI7O0FBeUJBMkMsT0FBT0MsT0FBUCxHQUFpQmxCLFVBQWpCIiwiZmlsZSI6ImdldC1kb2NrZXItcnVuLW9wdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7ZXhlY1N5bmN9ID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpXG5jb25zdCBzYW1wbGUgPSBbJy1hLCAnLCAnLS1hdHRhY2ggdmFsdWUgICAgICAgICAgICAgICAgJ11cbmNvbnN0IFIgPSByZXF1aXJlKCdyYW1kYScpXG5cbmNvbnN0IF9zbGljZXMgPSAocGFyYW1zLCBkYXRhKSA9PiBwYXJhbXMubWFwKHAgPT4gZGF0YS5zbGljZSguLi5wKSlcbmNvbnN0IHNsaWNlcyA9IFIuY3VycnkoX3NsaWNlcylcbmNvbnN0IHJlbW92ZVdoaXRlc3BhY2VJdGVtcyA9IFIucmVqZWN0KFIucGlwZShSLnRyaW0sIFIuaXNFbXB0eSkpXG5cbmNvbnN0IGlmTm90aGluZ0Vsc2UgPSB2YWx1ZSA9PiBSLmlmRWxzZShSLmlzTmlsLCBSLmFsd2F5cyh2YWx1ZSksIFIuaWRlbnRpdHkpXG5jb25zdCBub3ROaWwgPSBSLmNvbXBsZW1lbnQoUi5pc05pbClcbmNvbnN0IGhhc0luZGV4ID0gUi5jdXJyeShSLnBpcGUoUi5udGgsIG5vdE5pbCkpXG5cbmNvbnN0IGdldE9wdGlvbnMgPSAoKSA9PiBSLnBpcGUoXG4gIFIudG9TdHJpbmcsXG4gIFIuc3BsaXQoJ09wdGlvbnM6XFxuJyksXG4gIFIubnRoKDEpLFxuICBSLnNwbGl0KCdcXG4nKSxcbiAgUi5yZWplY3QoUi5pc0VtcHR5KSxcbiAgUi5tYXAoUi5waXBlKFxuICAgIHNsaWNlcyhbWzMsIDRdLCBbNiwgMzZdLCBbMzZdXSksXG4gICAgUi5vdmVyKFxuICAgICAgUi5sZW5zSW5kZXgoMSksXG4gICAgICBSLnBpcGUoXG4gICAgICAgIFIudHJpbSxcbiAgICAgICAgUi5zcGxpdCgnICcpLFxuICAgICAgICBSLnVubGVzcyhoYXNJbmRleCgxKSwgUi5hcHBlbmQoJ2Jvb2xlYW4nKSlcbiAgICAgIClcbiAgICApLFxuICAgIFIuZmxhdHRlbixcbiAgICBSLnppcE9iaihbJ2FsaWFzJywgJ25hbWUnLCAndHlwZScsICdkZXNjcmlwdGlvbiddKSxcbiAgICBSLm92ZXIoUi5sZW5zUHJvcCgnYWxpYXMnKSwgUi5waXBlKFIub2YsIHJlbW92ZVdoaXRlc3BhY2VJdGVtcykpLFxuICAgIFIub3ZlcihSLmxlbnNQcm9wKCduYW1lJyksIFIuc2xpY2UoMiwgUi5JbmZpbml0eSkpLFxuICAgIFIuY29udmVyZ2UoUi5vYmpPZiwgW1IucHJvcCgnbmFtZScpLCBSLm9taXQoJ25hbWUnKV0pXG4gICkpLFxuICBSLm1lcmdlQWxsXG4pKGV4ZWNTeW5jKCdkb2NrZXIgcnVuIC0taGVscCcpKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE9wdGlvbnNcbiJdfQ==