var _require = require('child_process');

const spawn = _require.spawn;

const docker = require('../docker-api');

var _require2 = require('./up');

const makeRunArgs = _require2.makeRunArgs,
      prepare = _require2.prepare;


const sh = (services, config, { service: serviceName }) => {
  const service = services[serviceName];
  delete service.cmd;
  const name = `${ config.project.name }_${ serviceName }`;
  docker.getContainer(name).then(() => {
    spawn('docker', ['exec', '-it', name, '/bin/sh'], { stdio: 'inherit' });
  }).catch(() => {
    const args = ['run', ...makeRunArgs(prepare(service), name), '/bin/sh'];
    const cmd = `docker ${ args.join(' ') }`;
    console.log(cmd);
    spawn('docker', args, { stdio: 'inherit' });
  });
};

module.exports = sh;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY21kcy9zaC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwic3Bhd24iLCJkb2NrZXIiLCJtYWtlUnVuQXJncyIsInByZXBhcmUiLCJzaCIsInNlcnZpY2VzIiwiY29uZmlnIiwic2VydmljZSIsInNlcnZpY2VOYW1lIiwiY21kIiwibmFtZSIsInByb2plY3QiLCJnZXRDb250YWluZXIiLCJ0aGVuIiwic3RkaW8iLCJjYXRjaCIsImFyZ3MiLCJqb2luIiwiY29uc29sZSIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJlQUFnQkEsUUFBUSxlQUFSLEM7O01BQVRDLEssWUFBQUEsSzs7QUFDUCxNQUFNQyxTQUFTRixRQUFRLGVBQVIsQ0FBZjs7Z0JBQytCQSxRQUFRLE1BQVIsQzs7TUFBeEJHLFcsYUFBQUEsVztNQUFhQyxPLGFBQUFBLE87OztBQUVwQixNQUFNQyxLQUFLLENBQUNDLFFBQUQsRUFBV0MsTUFBWCxFQUFtQixFQUFDQyxTQUFTQyxXQUFWLEVBQW5CLEtBQThDO0FBQ3ZELFFBQU1ELFVBQVVGLFNBQVNHLFdBQVQsQ0FBaEI7QUFDQSxTQUFPRCxRQUFRRSxHQUFmO0FBQ0EsUUFBTUMsT0FBUSxJQUFFSixPQUFPSyxPQUFQLENBQWVELElBQUssTUFBR0YsV0FBWSxHQUFuRDtBQUNBUCxTQUFPVyxZQUFQLENBQW9CRixJQUFwQixFQUNHRyxJQURILENBQ1EsTUFBTTtBQUNWYixVQUFNLFFBQU4sRUFBZ0IsQ0FBQyxNQUFELEVBQVMsS0FBVCxFQUFnQlUsSUFBaEIsRUFBc0IsU0FBdEIsQ0FBaEIsRUFBa0QsRUFBQ0ksT0FBTyxTQUFSLEVBQWxEO0FBQ0QsR0FISCxFQUlHQyxLQUpILENBSVMsTUFBTTtBQUNYLFVBQU1DLE9BQU8sQ0FBQyxLQUFELEVBQVEsR0FBR2QsWUFBWUMsUUFBUUksT0FBUixDQUFaLEVBQThCRyxJQUE5QixDQUFYLEVBQWdELFNBQWhELENBQWI7QUFDQSxVQUFNRCxNQUFPLFdBQVNPLEtBQUtDLElBQUwsQ0FBVSxHQUFWLENBQWUsR0FBckM7QUFDQUMsWUFBUUMsR0FBUixDQUFZVixHQUFaO0FBQ0FULFVBQU0sUUFBTixFQUFnQmdCLElBQWhCLEVBQXNCLEVBQUNGLE9BQU8sU0FBUixFQUF0QjtBQUNELEdBVEg7QUFVRCxDQWREOztBQWdCQU0sT0FBT0MsT0FBUCxHQUFpQmpCLEVBQWpCIiwiZmlsZSI6InNoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge3NwYXdufSA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKVxuY29uc3QgZG9ja2VyID0gcmVxdWlyZSgnLi4vZG9ja2VyLWFwaScpXG5jb25zdCB7bWFrZVJ1bkFyZ3MsIHByZXBhcmV9ID0gcmVxdWlyZSgnLi91cCcpXG5cbmNvbnN0IHNoID0gKHNlcnZpY2VzLCBjb25maWcsIHtzZXJ2aWNlOiBzZXJ2aWNlTmFtZX0pID0+IHtcbiAgY29uc3Qgc2VydmljZSA9IHNlcnZpY2VzW3NlcnZpY2VOYW1lXVxuICBkZWxldGUgc2VydmljZS5jbWRcbiAgY29uc3QgbmFtZSA9IGAke2NvbmZpZy5wcm9qZWN0Lm5hbWV9XyR7c2VydmljZU5hbWV9YFxuICBkb2NrZXIuZ2V0Q29udGFpbmVyKG5hbWUpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgc3Bhd24oJ2RvY2tlcicsIFsnZXhlYycsICctaXQnLCBuYW1lLCAnL2Jpbi9zaCddLCB7c3RkaW86ICdpbmhlcml0J30pXG4gICAgfSlcbiAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgY29uc3QgYXJncyA9IFsncnVuJywgLi4ubWFrZVJ1bkFyZ3MocHJlcGFyZShzZXJ2aWNlKSwgbmFtZSksICcvYmluL3NoJ11cbiAgICAgIGNvbnN0IGNtZCA9IGBkb2NrZXIgJHthcmdzLmpvaW4oJyAnKX1gXG4gICAgICBjb25zb2xlLmxvZyhjbWQpXG4gICAgICBzcGF3bignZG9ja2VyJywgYXJncywge3N0ZGlvOiAnaW5oZXJpdCd9KVxuICAgIH0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hcbiJdfQ==