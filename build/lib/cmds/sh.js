var _require = require('child_process');

const spawn = _require.spawn;

const docker = require('../docker-api');

var _require2 = require('./up');

const makeRunArgs = _require2.makeRunArgs,
      prepare = _require2.prepare;


const sh = (services, config, { service: serviceName }) => {
  const service = services[serviceName];
  delete service.cmd;
  const name = `${ config.project.name }_${ serviceName }`;
  docker.getContainer(name).then(() => {
    spawn('docker', ['exec', '-it', name, '/bin/sh'], { stdio: 'inherit' });
  }).catch(err => {
    const args = ['run', ...makeRunArgs(prepare(service), name), '/bin/sh'];
    const cmd = `docker ${ args.join(' ') }`;
    console.log(cmd);
    spawn('docker', args, { stdio: 'inherit' });
  });
};

module.exports = sh;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY21kcy9zaC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwic3Bhd24iLCJkb2NrZXIiLCJtYWtlUnVuQXJncyIsInByZXBhcmUiLCJzaCIsInNlcnZpY2VzIiwiY29uZmlnIiwic2VydmljZSIsInNlcnZpY2VOYW1lIiwiY21kIiwibmFtZSIsInByb2plY3QiLCJnZXRDb250YWluZXIiLCJ0aGVuIiwic3RkaW8iLCJjYXRjaCIsImVyciIsImFyZ3MiLCJqb2luIiwiY29uc29sZSIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJlQUFnQkEsUUFBUSxlQUFSLEM7O01BQVRDLEssWUFBQUEsSzs7QUFDUCxNQUFNQyxTQUFTRixRQUFRLGVBQVIsQ0FBZjs7Z0JBQytCQSxRQUFRLE1BQVIsQzs7TUFBeEJHLFcsYUFBQUEsVztNQUFhQyxPLGFBQUFBLE87OztBQUVwQixNQUFNQyxLQUFLLENBQUNDLFFBQUQsRUFBV0MsTUFBWCxFQUFtQixFQUFDQyxTQUFTQyxXQUFWLEVBQW5CLEtBQThDO0FBQ3ZELFFBQU1ELFVBQVVGLFNBQVNHLFdBQVQsQ0FBaEI7QUFDQSxTQUFPRCxRQUFRRSxHQUFmO0FBQ0EsUUFBTUMsT0FBUSxJQUFFSixPQUFPSyxPQUFQLENBQWVELElBQUssTUFBR0YsV0FBWSxHQUFuRDtBQUNBUCxTQUFPVyxZQUFQLENBQW9CRixJQUFwQixFQUNHRyxJQURILENBQ1EsTUFBTTtBQUNWYixVQUFNLFFBQU4sRUFBZ0IsQ0FBQyxNQUFELEVBQVMsS0FBVCxFQUFnQlUsSUFBaEIsRUFBc0IsU0FBdEIsQ0FBaEIsRUFBa0QsRUFBQ0ksT0FBTyxTQUFSLEVBQWxEO0FBQ0QsR0FISCxFQUlHQyxLQUpILENBSVNDLE9BQU87QUFDWixVQUFNQyxPQUFPLENBQUMsS0FBRCxFQUFRLEdBQUdmLFlBQVlDLFFBQVFJLE9BQVIsQ0FBWixFQUE4QkcsSUFBOUIsQ0FBWCxFQUFnRCxTQUFoRCxDQUFiO0FBQ0EsVUFBTUQsTUFBTyxXQUFTUSxLQUFLQyxJQUFMLENBQVUsR0FBVixDQUFlLEdBQXJDO0FBQ0FDLFlBQVFDLEdBQVIsQ0FBWVgsR0FBWjtBQUNBVCxVQUFNLFFBQU4sRUFBZ0JpQixJQUFoQixFQUFzQixFQUFDSCxPQUFPLFNBQVIsRUFBdEI7QUFDRCxHQVRIO0FBVUQsQ0FkRDs7QUFnQkFPLE9BQU9DLE9BQVAsR0FBaUJsQixFQUFqQiIsImZpbGUiOiJzaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtzcGF3bn0gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJylcbmNvbnN0IGRvY2tlciA9IHJlcXVpcmUoJy4uL2RvY2tlci1hcGknKVxuY29uc3Qge21ha2VSdW5BcmdzLCBwcmVwYXJlfSA9IHJlcXVpcmUoJy4vdXAnKVxuXG5jb25zdCBzaCA9IChzZXJ2aWNlcywgY29uZmlnLCB7c2VydmljZTogc2VydmljZU5hbWV9KSA9PiB7XG4gIGNvbnN0IHNlcnZpY2UgPSBzZXJ2aWNlc1tzZXJ2aWNlTmFtZV1cbiAgZGVsZXRlIHNlcnZpY2UuY21kXG4gIGNvbnN0IG5hbWUgPSBgJHtjb25maWcucHJvamVjdC5uYW1lfV8ke3NlcnZpY2VOYW1lfWBcbiAgZG9ja2VyLmdldENvbnRhaW5lcihuYW1lKVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgIHNwYXduKCdkb2NrZXInLCBbJ2V4ZWMnLCAnLWl0JywgbmFtZSwgJy9iaW4vc2gnXSwge3N0ZGlvOiAnaW5oZXJpdCd9KVxuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICBjb25zdCBhcmdzID0gWydydW4nLCAuLi5tYWtlUnVuQXJncyhwcmVwYXJlKHNlcnZpY2UpLCBuYW1lKSwgJy9iaW4vc2gnXVxuICAgICAgY29uc3QgY21kID0gYGRvY2tlciAke2FyZ3Muam9pbignICcpfWBcbiAgICAgIGNvbnNvbGUubG9nKGNtZClcbiAgICAgIHNwYXduKCdkb2NrZXInLCBhcmdzLCB7c3RkaW86ICdpbmhlcml0J30pXG4gICAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaFxuIl19