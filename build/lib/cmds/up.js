function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _require = require('child_process');

const spawn = _require.spawn;

const R = require('ramda');
const path = require('path');
const tryHook = require('../try-hook');
const build = require('./build');

var _require2 = require('figures-colored');

const tick = _require2.tick,
      cross = _require2.cross;

const prefixLines = require('prefix-stream-lines');
const format = require('chalk');
const connectLogs = require('./logs');

const dorcArgs = ['mode', 'hooks', 'image', 'command'];

const propTransforms = {
  volumes: value => {
    return value.map(v => {
      if (!path.isAbsolute(v)) {
        return ['-v', path.join(process.cwd(), v)];
      }
      return ['-v', value];
    });
  },
  env: value => R.toPairs(value).map(([k, v]) => ['-e', `${ k }=${ v }`]),
  ports: value => value.map(v => ['-p', v])
};

const getTransform = prop => {
  const transform = propTransforms[prop];
  if (!transform) {
    return (value, prop) => {
      if (Array.isArray(value)) {
        return value.map(v => ['--' + prop, v]);
      } else {
        return ['--' + prop, value];
      }
    };
  } else {
    return transform;
  }
};

const makeRunArgs = (service, containerName) => {
  const dockerRunProps = R.pipe(() => service, R.omit(dorcArgs), R.assoc('name', containerName), R.toPairs)();
  const options = dockerRunProps.map(([key, value]) => {
    return getTransform(key)(value, key);
  });
  const args = R.flatten([options, service.image, service.command || '']).filter(v => v);
  return args;
};

const startService = (service, containerName) => new Promise((resolve, reject) => {
  const args = ['run', '-d', ...makeRunArgs(service, containerName)];
  process.stdout.write(`  > docker ${ args.join(' ') }\n\n`);
  const p = spawn('docker', args);
  p.stderr.pipe(process.stderr);
  p.on('close', exitCode => {
    exitCode !== 0 ? reject(exitCode) : resolve();
  });
});

const startServices = (services, config) => Promise.all(R.pipe(R.toPairs, R.addIndex(R.map)(([name, service], idx) => {
  const containerName = `${ config.projectName }_${ name }`;
  return tryHook('before-up', service, name).then(() => startService(service, containerName)).then(() => {
    process.stdout.write(`${ tick } ${ name } is up\n`);
  }).catch(err => {
    process.stdout.write(`${ cross } could not start ${ name }\n`);
  });
}))(services));

const prepare = R.map(R.over(R.lensProp('image'), R.ifElse(R.is(String), R.identity, R.pipe(R.nth(-1), R.prop('tags'), R.nth(0)))));

const up = (() => {
  var _ref = _asyncToGenerator(function* (services, config, args) {
    yield build(services, config);
    return startServices(prepare(services), config, args).then(function () {
      if (args.detached !== true) {
        return connectLogs(services, config);
      }
    });
  });

  return function up(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
})();

module.exports = up;
//# sourceMappingURL=data:application/json;base64,