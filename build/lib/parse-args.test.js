const test = require('tape');
const parseArgs = require('./parse-args');
const run = require('../handler/run');
const options = require('../options');
const commands = require('../commands');
const R = require('ramda');

test('parse args', t => {
  t.plan(1);
  t.deepEqual(parseArgs(options, commands, ['-m', 'dev', 'run', '--dry', '-e', 'FOO=foo', '--detach', '-d', '-e', 'FOO=bar bar', '--no-healthcheck', 'foo', 'doit', 'toit']), {
    commandName: 'run',
    command: R.assoc('name', 'run', commands.run),
    global: { help: false, mode: 'dev' },
    sub: {
      options: {
        dry: true
      },
      docker: {
        env: ['FOO=foo', 'FOO=bar bar'],
        detach: true,
        'no-healthcheck': true
      },
      service: 'foo',
      cmd: ['doit', 'toit']
    }
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcGFyc2UtYXJncy50ZXN0LmpzIl0sIm5hbWVzIjpbInRlc3QiLCJyZXF1aXJlIiwicGFyc2VBcmdzIiwicnVuIiwib3B0aW9ucyIsImNvbW1hbmRzIiwiUiIsInQiLCJwbGFuIiwiZGVlcEVxdWFsIiwiY29tbWFuZE5hbWUiLCJjb21tYW5kIiwiYXNzb2MiLCJnbG9iYWwiLCJoZWxwIiwibW9kZSIsInN1YiIsImRyeSIsImRvY2tlciIsImVudiIsImRldGFjaCIsInNlcnZpY2UiLCJjbWQiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU9DLFFBQVEsTUFBUixDQUFiO0FBQ0EsTUFBTUMsWUFBWUQsUUFBUSxjQUFSLENBQWxCO0FBQ0EsTUFBTUUsTUFBTUYsUUFBUSxnQkFBUixDQUFaO0FBQ0EsTUFBTUcsVUFBVUgsUUFBUSxZQUFSLENBQWhCO0FBQ0EsTUFBTUksV0FBV0osUUFBUSxhQUFSLENBQWpCO0FBQ0EsTUFBTUssSUFBSUwsUUFBUSxPQUFSLENBQVY7O0FBRUFELEtBQUssWUFBTCxFQUFvQk8sS0FBSztBQUN2QkEsSUFBRUMsSUFBRixDQUFPLENBQVA7QUFDQUQsSUFBRUUsU0FBRixDQUNFUCxVQUNFRSxPQURGLEVBRUVDLFFBRkYsRUFHRSxDQUNFLElBREYsRUFDUSxLQURSLEVBQ2UsS0FEZixFQUVFLE9BRkYsRUFFVyxJQUZYLEVBRWlCLFNBRmpCLEVBRTRCLFVBRjVCLEVBRXdDLElBRnhDLEVBRThDLElBRjlDLEVBRW9ELGFBRnBELEVBRW1FLGtCQUZuRSxFQUV1RixLQUZ2RixFQUU4RixNQUY5RixFQUVzRyxNQUZ0RyxDQUhGLENBREYsRUFTRTtBQUNFSyxpQkFBYSxLQURmO0FBRUVDLGFBQVNMLEVBQUVNLEtBQUYsQ0FBUSxNQUFSLEVBQWdCLEtBQWhCLEVBQXVCUCxTQUFTRixHQUFoQyxDQUZYO0FBR0VVLFlBQVEsRUFBQ0MsTUFBTSxLQUFQLEVBQWNDLE1BQU0sS0FBcEIsRUFIVjtBQUlFQyxTQUFLO0FBQ0haLGVBQVM7QUFDUGEsYUFBSztBQURFLE9BRE47QUFJSEMsY0FBUTtBQUNOQyxhQUFLLENBQUMsU0FBRCxFQUFZLGFBQVosQ0FEQztBQUVOQyxnQkFBUSxJQUZGO0FBR04sMEJBQWtCO0FBSFosT0FKTDtBQVNIQyxlQUFTLEtBVE47QUFVSEMsV0FBSyxDQUFDLE1BQUQsRUFBUyxNQUFUO0FBVkY7QUFKUCxHQVRGO0FBMkJELENBN0JEIiwiZmlsZSI6InBhcnNlLWFyZ3MudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRlc3QgPSByZXF1aXJlKCd0YXBlJylcbmNvbnN0IHBhcnNlQXJncyA9IHJlcXVpcmUoJy4vcGFyc2UtYXJncycpXG5jb25zdCBydW4gPSByZXF1aXJlKCd+L2hhbmRsZXIvcnVuJylcbmNvbnN0IG9wdGlvbnMgPSByZXF1aXJlKCd+L29wdGlvbnMnKVxuY29uc3QgY29tbWFuZHMgPSByZXF1aXJlKCd+L2NvbW1hbmRzJylcbmNvbnN0IFIgPSByZXF1aXJlKCdyYW1kYScpXG5cbnRlc3QoJ3BhcnNlIGFyZ3MnICwgdCA9PiB7XG4gIHQucGxhbigxKVxuICB0LmRlZXBFcXVhbChcbiAgICBwYXJzZUFyZ3MoXG4gICAgICBvcHRpb25zLFxuICAgICAgY29tbWFuZHMsXG4gICAgICBbXG4gICAgICAgICctbScsICdkZXYnLCAncnVuJyxcbiAgICAgICAgJy0tZHJ5JywgJy1lJywgJ0ZPTz1mb28nLCAnLS1kZXRhY2gnLCAnLWQnLCAnLWUnLCAnRk9PPWJhciBiYXInLCAnLS1uby1oZWFsdGhjaGVjaycsICdmb28nLCAnZG9pdCcsICd0b2l0J1xuICAgICAgXVxuICAgICksXG4gICAge1xuICAgICAgY29tbWFuZE5hbWU6ICdydW4nLFxuICAgICAgY29tbWFuZDogUi5hc3NvYygnbmFtZScsICdydW4nLCBjb21tYW5kcy5ydW4pLFxuICAgICAgZ2xvYmFsOiB7aGVscDogZmFsc2UsIG1vZGU6ICdkZXYnfSxcbiAgICAgIHN1Yjoge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgZHJ5OiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBkb2NrZXI6IHtcbiAgICAgICAgICBlbnY6IFsnRk9PPWZvbycsICdGT089YmFyIGJhciddLFxuICAgICAgICAgIGRldGFjaDogdHJ1ZSxcbiAgICAgICAgICAnbm8taGVhbHRoY2hlY2snOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHNlcnZpY2U6ICdmb28nLFxuICAgICAgICBjbWQ6IFsnZG9pdCcsICd0b2l0J11cbiAgICAgIH1cbiAgICB9XG4gIClcbn0pXG4iXX0=