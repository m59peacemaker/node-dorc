var _require = require('child_process');

const spawn = _require.spawn;

const R = require('ramda');
const format = require('chalk');
const prefixLines = require('prefix-stream-lines');

const runHook = (hook, hookName, serviceName) => new Promise((resolve, reject) => {
  const cmdParts = hook.split(' ');[R.pipe(R.always(serviceName), R.ifElse(R.isNil, R.always(hookName + ':'), R.always(`Service: ${ serviceName } - ${ hookName }:`)), format.cyan.dim.bold)(), `  > ${ hook }`].forEach(_ => console.log(_));
  const p = spawn('/bin/sh', ['-c', hook]).on('close', exitCode => exitCode ? reject(`hook "${ hookName }" failed`) : resolve());
  p.stdout.pipe(prefixLines(' '.repeat(4))).pipe(process.stdout);
  p.stderr.pipe(prefixLines(' '.repeat(4))).pipe(process.stderr);
});

module.exports = runHook;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcnVuLWhvb2suanMiXSwibmFtZXMiOlsicmVxdWlyZSIsInNwYXduIiwiUiIsImZvcm1hdCIsInByZWZpeExpbmVzIiwicnVuSG9vayIsImhvb2siLCJob29rTmFtZSIsInNlcnZpY2VOYW1lIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjbWRQYXJ0cyIsInNwbGl0IiwicGlwZSIsImFsd2F5cyIsImlmRWxzZSIsImlzTmlsIiwiY3lhbiIsImRpbSIsImJvbGQiLCJmb3JFYWNoIiwiXyIsImNvbnNvbGUiLCJsb2ciLCJwIiwib24iLCJleGl0Q29kZSIsInN0ZG91dCIsInJlcGVhdCIsInByb2Nlc3MiLCJzdGRlcnIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiZUFBZ0JBLFFBQVEsZUFBUixDOztNQUFUQyxLLFlBQUFBLEs7O0FBQ1AsTUFBTUMsSUFBSUYsUUFBUSxPQUFSLENBQVY7QUFDQSxNQUFNRyxTQUFTSCxRQUFRLE9BQVIsQ0FBZjtBQUNBLE1BQU1JLGNBQWNKLFFBQVEscUJBQVIsQ0FBcEI7O0FBRUEsTUFBTUssVUFBVSxDQUFDQyxJQUFELEVBQU9DLFFBQVAsRUFBaUJDLFdBQWpCLEtBQWlDLElBQUlDLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDaEYsUUFBTUMsV0FBV04sS0FBS08sS0FBTCxDQUFXLEdBQVgsQ0FBakIsQ0FDQyxDQUNDWCxFQUFFWSxJQUFGLENBQ0VaLEVBQUVhLE1BQUYsQ0FBU1AsV0FBVCxDQURGLEVBRUVOLEVBQUVjLE1BQUYsQ0FDRWQsRUFBRWUsS0FESixFQUVFZixFQUFFYSxNQUFGLENBQVNSLFdBQVcsR0FBcEIsQ0FGRixFQUdFTCxFQUFFYSxNQUFGLENBQVUsYUFBV1AsV0FBWSxRQUFLRCxRQUFTLElBQS9DLENBSEYsQ0FGRixFQU9FSixPQUFPZSxJQUFQLENBQVlDLEdBQVosQ0FBZ0JDLElBUGxCLEdBREQsRUFVRSxRQUFNZCxJQUFLLEdBVmIsRUFXQ2UsT0FYRCxDQVdTQyxLQUFLQyxRQUFRQyxHQUFSLENBQVlGLENBQVosQ0FYZDtBQVlELFFBQU1HLElBQUl4QixNQUFNLFNBQU4sRUFBaUIsQ0FBQyxJQUFELEVBQU9LLElBQVAsQ0FBakIsRUFDUG9CLEVBRE8sQ0FDSixPQURJLEVBQ0tDLFlBQVlBLFdBQVdoQixPQUFRLFVBQVFKLFFBQVMsV0FBekIsQ0FBWCxHQUFpREcsU0FEbEUsQ0FBVjtBQUVBZSxJQUFFRyxNQUFGLENBQ0VkLElBREYsQ0FDT1YsWUFBWSxJQUFJeUIsTUFBSixDQUFXLENBQVgsQ0FBWixDQURQLEVBRUVmLElBRkYsQ0FFT2dCLFFBQVFGLE1BRmY7QUFHQUgsSUFBRU0sTUFBRixDQUNHakIsSUFESCxDQUNRVixZQUFZLElBQUl5QixNQUFKLENBQVcsQ0FBWCxDQUFaLENBRFIsRUFFR2YsSUFGSCxDQUVRZ0IsUUFBUUMsTUFGaEI7QUFHRCxDQXRCZ0QsQ0FBakQ7O0FBd0JBQyxPQUFPQyxPQUFQLEdBQWlCNUIsT0FBakIiLCJmaWxlIjoicnVuLWhvb2suanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7c3Bhd259ID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpXG5jb25zdCBSID0gcmVxdWlyZSgncmFtZGEnKVxuY29uc3QgZm9ybWF0ID0gcmVxdWlyZSgnY2hhbGsnKVxuY29uc3QgcHJlZml4TGluZXMgPSByZXF1aXJlKCdwcmVmaXgtc3RyZWFtLWxpbmVzJylcblxuY29uc3QgcnVuSG9vayA9IChob29rLCBob29rTmFtZSwgc2VydmljZU5hbWUpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgY29uc3QgY21kUGFydHMgPSBob29rLnNwbGl0KCcgJylcbiAgO1tcbiAgICBSLnBpcGUoXG4gICAgICBSLmFsd2F5cyhzZXJ2aWNlTmFtZSksXG4gICAgICBSLmlmRWxzZShcbiAgICAgICAgUi5pc05pbCxcbiAgICAgICAgUi5hbHdheXMoaG9va05hbWUgKyAnOicpLFxuICAgICAgICBSLmFsd2F5cyhgU2VydmljZTogJHtzZXJ2aWNlTmFtZX0gLSAke2hvb2tOYW1lfTpgKVxuICAgICAgKSxcbiAgICAgIGZvcm1hdC5jeWFuLmRpbS5ib2xkXG4gICAgKSgpLFxuICAgIGAgID4gJHtob29rfWBcbiAgXS5mb3JFYWNoKF8gPT4gY29uc29sZS5sb2coXykpXG4gIGNvbnN0IHAgPSBzcGF3bignL2Jpbi9zaCcsIFsnLWMnLCBob29rXSlcbiAgICAub24oJ2Nsb3NlJywgZXhpdENvZGUgPT4gZXhpdENvZGUgPyByZWplY3QoYGhvb2sgXCIke2hvb2tOYW1lfVwiIGZhaWxlZGApIDogcmVzb2x2ZSgpKVxuICBwLnN0ZG91dFxuICAgLnBpcGUocHJlZml4TGluZXMoJyAnLnJlcGVhdCg0KSkpXG4gICAucGlwZShwcm9jZXNzLnN0ZG91dClcbiAgcC5zdGRlcnJcbiAgICAucGlwZShwcmVmaXhMaW5lcygnICcucmVwZWF0KDQpKSlcbiAgICAucGlwZShwcm9jZXNzLnN0ZGVycilcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gcnVuSG9va1xuIl19