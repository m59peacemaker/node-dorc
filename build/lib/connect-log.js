var _require = require('child_process');

const spawn = _require.spawn;

const prefixLines = require('prefix-stream-lines');
const format = require('chalk');
const colors = ['cyan', 'yellow', 'green', 'magenta', 'blue'];
function Next(array) {
  let index = -1;
  return function () {
    index = index >= array.length - 1 ? 0 : index + 1;
    return array[index];
  };
}
const nextColor = Next(colors);

const connect = name => {
  console.log(name);
  const color = nextColor();
  const p = spawn('docker', ['logs', '--follow', name]);
  p.stdout.pipe(prefixLines(`${ format[color](name) } | `)).pipe(process.stdout);
  p.stderr.pipe(prefixLines(`${ format[color](name) } | `)).pipe(process.stderr);
};

module.exports = connect;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvY29ubmVjdC1sb2cuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsInNwYXduIiwicHJlZml4TGluZXMiLCJmb3JtYXQiLCJjb2xvcnMiLCJOZXh0IiwiYXJyYXkiLCJpbmRleCIsImxlbmd0aCIsIm5leHRDb2xvciIsImNvbm5lY3QiLCJuYW1lIiwiY29uc29sZSIsImxvZyIsImNvbG9yIiwicCIsInN0ZG91dCIsInBpcGUiLCJwcm9jZXNzIiwic3RkZXJyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6ImVBQWdCQSxRQUFRLGVBQVIsQzs7TUFBVEMsSyxZQUFBQSxLOztBQUNQLE1BQU1DLGNBQWNGLFFBQVEscUJBQVIsQ0FBcEI7QUFDQSxNQUFNRyxTQUFTSCxRQUFRLE9BQVIsQ0FBZjtBQUNBLE1BQU1JLFNBQVMsQ0FBQyxNQUFELEVBQVMsUUFBVCxFQUFtQixPQUFuQixFQUE0QixTQUE1QixFQUF1QyxNQUF2QyxDQUFmO0FBQ0EsU0FBU0MsSUFBVCxDQUFlQyxLQUFmLEVBQXNCO0FBQ3BCLE1BQUlDLFFBQVEsQ0FBQyxDQUFiO0FBQ0EsU0FBTyxZQUFZO0FBQ2pCQSxZQUFRQSxTQUFTRCxNQUFNRSxNQUFOLEdBQWMsQ0FBdkIsR0FBMkIsQ0FBM0IsR0FBK0JELFFBQVEsQ0FBL0M7QUFDQSxXQUFPRCxNQUFNQyxLQUFOLENBQVA7QUFDRCxHQUhEO0FBSUQ7QUFDRCxNQUFNRSxZQUFZSixLQUFLRCxNQUFMLENBQWxCOztBQUVBLE1BQU1NLFVBQVdDLElBQUQsSUFBVTtBQUN4QkMsVUFBUUMsR0FBUixDQUFZRixJQUFaO0FBQ0EsUUFBTUcsUUFBUUwsV0FBZDtBQUNBLFFBQU1NLElBQUlkLE1BQU0sUUFBTixFQUFnQixDQUFDLE1BQUQsRUFBUyxVQUFULEVBQXFCVSxJQUFyQixDQUFoQixDQUFWO0FBQ0FJLElBQUVDLE1BQUYsQ0FDR0MsSUFESCxDQUNRZixZQUFhLElBQUVDLE9BQU9XLEtBQVAsRUFBY0gsSUFBZCxDQUFvQixNQUFuQyxDQURSLEVBRUdNLElBRkgsQ0FFUUMsUUFBUUYsTUFGaEI7QUFHQUQsSUFBRUksTUFBRixDQUNHRixJQURILENBQ1FmLFlBQWEsSUFBRUMsT0FBT1csS0FBUCxFQUFjSCxJQUFkLENBQW9CLE1BQW5DLENBRFIsRUFFR00sSUFGSCxDQUVRQyxRQUFRQyxNQUZoQjtBQUdELENBVkQ7O0FBWUFDLE9BQU9DLE9BQVAsR0FBaUJYLE9BQWpCIiwiZmlsZSI6ImNvbm5lY3QtbG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge3NwYXdufSA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKVxuY29uc3QgcHJlZml4TGluZXMgPSByZXF1aXJlKCdwcmVmaXgtc3RyZWFtLWxpbmVzJylcbmNvbnN0IGZvcm1hdCA9IHJlcXVpcmUoJ2NoYWxrJylcbmNvbnN0IGNvbG9ycyA9IFsnY3lhbicsICd5ZWxsb3cnLCAnZ3JlZW4nLCAnbWFnZW50YScsICdibHVlJ11cbmZ1bmN0aW9uIE5leHQgKGFycmF5KSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaW5kZXggPSBpbmRleCA+PSBhcnJheS5sZW5ndGggLTEgPyAwIDogaW5kZXggKyAxXG4gICAgcmV0dXJuIGFycmF5W2luZGV4XVxuICB9XG59XG5jb25zdCBuZXh0Q29sb3IgPSBOZXh0KGNvbG9ycylcblxuY29uc3QgY29ubmVjdCA9IChuYW1lKSA9PiB7XG4gIGNvbnNvbGUubG9nKG5hbWUpXG4gIGNvbnN0IGNvbG9yID0gbmV4dENvbG9yKClcbiAgY29uc3QgcCA9IHNwYXduKCdkb2NrZXInLCBbJ2xvZ3MnLCAnLS1mb2xsb3cnLCBuYW1lXSlcbiAgcC5zdGRvdXRcbiAgICAucGlwZShwcmVmaXhMaW5lcyhgJHtmb3JtYXRbY29sb3JdKG5hbWUpfSB8IGApKVxuICAgIC5waXBlKHByb2Nlc3Muc3Rkb3V0KVxuICBwLnN0ZGVyclxuICAgIC5waXBlKHByZWZpeExpbmVzKGAke2Zvcm1hdFtjb2xvcl0obmFtZSl9IHwgYCkpXG4gICAgLnBpcGUocHJvY2Vzcy5zdGRlcnIpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29ubmVjdFxuIl19