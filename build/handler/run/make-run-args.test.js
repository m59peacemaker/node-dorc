const os = require('os');
const test = require('tape');
const makeArgs = require('./make-run-args');
const image = 'pmkr/hello:1.0';

// makeRunArgs(serviceConfigObject, {service: '', cmd: [], options: {}, docker: {}})

test('throws if no service.image', t => {
  t.plan(1);
  try {
    makeArgs({});
    t.fail("didn't throw");
  } catch (err) {
    t.pass('requires image');
  }
});

test('service.image', t => {
  t.plan(1);
  t.equal(makeArgs({
    name: 'foo',
    container: 'project_foo',
    config: { image }
  }).join(' '), image);
});

test('service.env', t => {
  t.plan(1);
  const service = {
    name: 'foo',
    container: 'project_foo',
    config: {
      image,
      env: {
        FOO: 'foo',
        BAR: 'bar bar'
      }
    }
  };
  t.deepEqual(makeArgs(service), ['-e', 'FOO=foo', '-e', 'BAR=bar bar', image]);
});

test('service.volumes', t => {
  t.plan(1);
  const service = {
    name: 'foo',
    container: 'project_foo',
    config: {
      image,
      volumes: ['foo:/app', '~/tmp:/tmp']
    }
  };
  t.deepEqual(makeArgs(service).join(' '), `-v ${ process.cwd() }/foo:/app -v ${ os.homedir() }/tmp:/tmp ${ image }`);
});

test('service.cmd', t => {
  t.plan(1);
  const service = {
    name: 'foo',
    container: 'project_foo',
    config: {
      image,
      cmd: ['foo', 'bar', 'baz']
    }
  };
  t.deepEqual(makeArgs(service), [image, 'foo', 'bar', 'baz']);
});

test('service.cmd with quotes', t => {
  t.plan(1);
  const service = {
    name: 'foo',
    container: 'project_foo',
    config: {
      image,
      cmd: ['/bin/sh', '-c', 'printf "fail"']
    }
  };
  t.deepEqual(makeArgs(service), [image, '/bin/sh', '-c', 'printf "fail"']);
});

test('various', t => {
  t.plan(1);
  const service = {
    name: 'foo',
    container: 'project_foo',
    config: {
      image,
      cmd: ['foo', 'bar'],
      net: 'host',
      env: {
        FOO: 'foo foo'
      },
      volumes: ['~/foo:/foo']
    }
  };
  t.deepEqual(makeArgs(service), ['--net', 'host', '-e', 'FOO=foo foo', '-v', `${ os.homedir() }/foo:/foo`, image, 'foo', 'bar']);
});

test('basic options from service and cli args', t => {
  t.plan(1);
  const service = {
    name: 'foo',
    container: 'project_foo',
    config: {
      image,
      env: {
        FOO: 'foo foo'
      }
    }
  };
  t.deepEqual(makeArgs(service, { docker: { env: 'FOO=bar bar' } }), ['-e', 'FOO=foo foo', '--env', 'FOO=bar bar', image]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9oYW5kbGVyL3J1bi9tYWtlLXJ1bi1hcmdzLnRlc3QuanMiXSwibmFtZXMiOlsib3MiLCJyZXF1aXJlIiwidGVzdCIsIm1ha2VBcmdzIiwiaW1hZ2UiLCJ0IiwicGxhbiIsImZhaWwiLCJlcnIiLCJwYXNzIiwiZXF1YWwiLCJuYW1lIiwiY29udGFpbmVyIiwiY29uZmlnIiwiam9pbiIsInNlcnZpY2UiLCJlbnYiLCJGT08iLCJCQVIiLCJkZWVwRXF1YWwiLCJ2b2x1bWVzIiwicHJvY2VzcyIsImN3ZCIsImhvbWVkaXIiLCJjbWQiLCJuZXQiLCJkb2NrZXIiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUtDLFFBQVEsSUFBUixDQUFYO0FBQ0EsTUFBTUMsT0FBT0QsUUFBUSxNQUFSLENBQWI7QUFDQSxNQUFNRSxXQUFXRixRQUFRLGlCQUFSLENBQWpCO0FBQ0EsTUFBTUcsUUFBUSxnQkFBZDs7QUFFQTs7QUFFQUYsS0FBSyw0QkFBTCxFQUFtQ0csS0FBSztBQUN0Q0EsSUFBRUMsSUFBRixDQUFPLENBQVA7QUFDQSxNQUFJO0FBQ0ZILGFBQVMsRUFBVDtBQUNBRSxNQUFFRSxJQUFGLENBQU8sY0FBUDtBQUNELEdBSEQsQ0FHRSxPQUFPQyxHQUFQLEVBQVk7QUFDWkgsTUFBRUksSUFBRixDQUFPLGdCQUFQO0FBQ0Q7QUFDRixDQVJEOztBQVVBUCxLQUFLLGVBQUwsRUFBc0JHLEtBQUs7QUFDekJBLElBQUVDLElBQUYsQ0FBTyxDQUFQO0FBQ0FELElBQUVLLEtBQUYsQ0FDRVAsU0FBUztBQUNQUSxVQUFNLEtBREM7QUFFUEMsZUFBVyxhQUZKO0FBR1BDLFlBQVEsRUFBQ1QsS0FBRDtBQUhELEdBQVQsRUFJR1UsSUFKSCxDQUlRLEdBSlIsQ0FERixFQU1FVixLQU5GO0FBUUQsQ0FWRDs7QUFZQUYsS0FBSyxhQUFMLEVBQW9CRyxLQUFLO0FBQ3ZCQSxJQUFFQyxJQUFGLENBQU8sQ0FBUDtBQUNBLFFBQU1TLFVBQVU7QUFDZEosVUFBTSxL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SyxhQUFOLEVBQVQsRUFBbEIsQ0FERixFQUVFLENBQUMsSUFBRCxFQUFPLGFBQVAsRUFBc0IsT0FBdEIsRUFBK0IsYUFBL0IsRUFBOENaLEtBQTlDLENBRkY7QUFJRCxDQWhCRCIsImZpbGUiOiJtYWtlLXJ1bi1hcmdzLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBvcyA9IHJlcXVpcmUoJ29zJylcbmNvbnN0IHRlc3QgPSByZXF1aXJlKCd0YXBlJylcbmNvbnN0IG1ha2VBcmdzID0gcmVxdWlyZSgnLi9tYWtlLXJ1bi1hcmdzJylcbmNvbnN0IGltYWdlID0gJ3Bta3IvaGVsbG86MS4wJ1xuXG4vLyBtYWtlUnVuQXJncyhzZXJ2aWNlQ29uZmlnT2JqZWN0LCB7c2VydmljZTogJycsIGNtZDogW10sIG9wdGlvbnM6IHt9LCBkb2NrZXI6IHt9fSlcblxudGVzdCgndGhyb3dzIGlmIG5vIHNlcnZpY2UuaW1hZ2UnLCB0ID0+IHtcbiAgdC5wbGFuKDEpXG4gIHRyeSB7XG4gICAgbWFrZUFyZ3Moe30pXG4gICAgdC5mYWlsKFwiZGlkbid0IHRocm93XCIpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHQucGFzcygncmVxdWlyZXMgaW1hZ2UnKVxuICB9XG59KVxuXG50ZXN0KCdzZXJ2aWNlLmltYWdlJywgdCA9PiB7XG4gIHQucGxhbigxKVxuICB0LmVxdWFsKFxuICAgIG1ha2VBcmdzKHtcbiAgICAgIG5hbWU6ICdmb28nLFxuICAgICAgY29udGFpbmVyOiAncHJvamVjdF9mb28nLFxuICAgICAgY29uZmlnOiB7aW1hZ2V9XG4gICAgfSkuam9pbignICcpLFxuICAgIGltYWdlXG4gIClcbn0pXG5cbnRlc3QoJ3NlcnZpY2UuZW52JywgdCA9PiB7XG4gIHQucGxhbigxKVxuICBjb25zdCBzZXJ2aWNlID0ge1xuICAgIG5hbWU6ICdmb28nLFxuICAgIGNvbnRhaW5lcjogJ3Byb2plY3RfZm9vJyxcbiAgICBjb25maWc6IHtcbiAgICAgIGltYWdlLFxuICAgICAgZW52OiB7XG4gICAgICAgIEZPTzogJ2ZvbycsXG4gICAgICAgIEJBUjogJ2JhciBiYXInXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHQuZGVlcEVxdWFsKFxuICAgIG1ha2VBcmdzKHNlcnZpY2UpLFxuICAgIFsnLWUnLCAnRk9PPWZvbycsICctZScsICdCQVI9YmFyIGJhcicsIGltYWdlXVxuICApXG59KVxuXG50ZXN0KCdzZXJ2aWNlLnZvbHVtZXMnLCB0ID0+IHtcbiAgdC5wbGFuKDEpXG4gIGNvbnN0IHNlcnZpY2UgPSB7XG4gICAgbmFtZTogJ2ZvbycsXG4gICAgY29udGFpbmVyOiAncHJvamVjdF9mb28nLFxuICAgIGNvbmZpZzoge1xuICAgICAgaW1hZ2UsXG4gICAgICB2b2x1bWVzOiBbXG4gICAgICAgICdmb286L2FwcCcsXG4gICAgICAgICd+L3RtcDovdG1wJ1xuICAgICAgXVxuICAgIH1cbiAgfVxuICB0LmRlZXBFcXVhbChcbiAgICBtYWtlQXJncyhzZXJ2aWNlKS5qb2luKCcgJyksXG4gICAgYC12ICR7cHJvY2Vzcy5jd2QoKX0vZm9vOi9hcHAgLXYgJHtvcy5ob21lZGlyKCl9L3RtcDovdG1wICR7aW1hZ2V9YFxuICApXG59KVxuXG50ZXN0KCdzZXJ2aWNlLmNtZCcsIHQgPT4ge1xuICB0LnBsYW4oMSlcbiAgY29uc3Qgc2VydmljZSA9IHtcbiAgICBuYW1lOiAnZm9vJyxcbiAgICBjb250YWluZXI6ICdwcm9qZWN0X2ZvbycsXG4gICAgY29uZmlnOiB7XG4gICAgICBpbWFnZSxcbiAgICAgIGNtZDogWydmb28nLCAnYmFyJywgJ2JheiddXG4gICAgfVxuICB9XG4gIHQuZGVlcEVxdWFsKFxuICAgIG1ha2VBcmdzKHNlcnZpY2UpLFxuICAgIFtpbWFnZSwgJ2ZvbycsICdiYXInLCAnYmF6J11cbiAgKVxufSlcblxudGVzdCgnc2VydmljZS5jbWQgd2l0aCBxdW90ZXMnLCB0ID0+IHtcbiAgdC5wbGFuKDEpXG4gIGNvbnN0IHNlcnZpY2UgPSB7XG4gICAgbmFtZTogJ2ZvbycsXG4gICAgY29udGFpbmVyOiAncHJvamVjdF9mb28nLFxuICAgIGNvbmZpZzoge1xuICAgICAgaW1hZ2UsXG4gICAgICBjbWQ6IFsnL2Jpbi9zaCcsICctYycsICdwcmludGYgXCJmYWlsXCInXVxuICAgIH1cbiAgfVxuICB0LmRlZXBFcXVhbChcbiAgICBtYWtlQXJncyhzZXJ2aWNlKSxcbiAgICBbaW1hZ2UsICcvYmluL3NoJywgJy1jJywgJ3ByaW50ZiBcImZhaWxcIiddXG4gIClcbn0pXG5cbnRlc3QoJ3ZhcmlvdXMnLCB0ID0+IHtcbiAgdC5wbGFuKDEpXG4gIGNvbnN0IHNlcnZpY2UgPSB7XG4gICAgbmFtZTogJ2ZvbycsXG4gICAgY29udGFpbmVyOiAncHJvamVjdF9mb28nLFxuICAgIGNvbmZpZzoge1xuICAgICAgaW1hZ2UsXG4gICAgICBjbWQ6IFsnZm9vJywgJ2JhciddLFxuICAgICAgbmV0OiAnaG9zdCcsXG4gICAgICBlbnY6IHtcbiAgICAgICAgRk9POiAnZm9vIGZvbydcbiAgICAgIH0sXG4gICAgICB2b2x1bWVzOiBbXG4gICAgICAgICd+L2ZvbzovZm9vJyxcbiAgICAgIF1cbiAgICB9XG4gIH1cbiAgdC5kZWVwRXF1YWwoXG4gICAgbWFrZUFyZ3Moc2VydmljZSksXG4gICAgWyctLW5ldCcsICdob3N0JywgJy1lJywgJ0ZPTz1mb28gZm9vJywgJy12JywgYCR7b3MuaG9tZWRpcigpfS9mb286L2Zvb2AsIGltYWdlLCAnZm9vJywgJ2JhciddXG4gIClcbn0pXG5cbnRlc3QoJ2Jhc2ljIG9wdGlvbnMgZnJvbSBzZXJ2aWNlIGFuZCBjbGkgYXJncycsIHQgPT4ge1xuICB0LnBsYW4oMSlcbiAgY29uc3Qgc2VydmljZSA9IHtcbiAgICBuYW1lOiAnZm9vJyxcbiAgICBjb250YWluZXI6ICdwcm9qZWN0X2ZvbycsXG4gICAgY29uZmlnOiB7XG4gICAgICBpbWFnZSxcbiAgICAgIGVudjoge1xuICAgICAgICBGT086ICdmb28gZm9vJ1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB0LmRlZXBFcXVhbChcbiAgICBtYWtlQXJncyhzZXJ2aWNlLCB7ZG9ja2VyOiB7ZW52OiAnRk9PPWJhciBiYXInfX0pLFxuICAgIFsnLWUnLCAnRk9PPWZvbyBmb28nLCAnLS1lbnYnLCAnRk9PPWJhciBiYXInLCBpbWFnZV1cbiAgKVxufSlcbiJdfQ==