const R = require('ramda');
const minimist = require('minimist');
const sharedOptions = require('../../lib/shared-options');
const pickIfAnySpecified = require('../../lib/pick-if-any-specified');
const up = require('./');

const parse = (args, options) => {
  return { services: minimist(args)._ };
};

const handler = (services, config, args) => {
  const selectedServices = pickIfAnySpecified(args.services, services);
  return R.compose(_ => Promise.all(_), R.values, R.map(_ => up(_, {})))(selectedServices);
};

const command = {
  usage: 'up [services...]',
  description: 'build and start service(s)',
  options: {
    detach: sharedOptions.detach
  },
  parse,
  handler
};

module.exports = command;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9oYW5kbGVyL3VwL2NtZC5qcyJdLCJuYW1lcyI6WyJSIiwicmVxdWlyZSIsIm1pbmltaXN0Iiwic2hhcmVkT3B0aW9ucyIsInBpY2tJZkFueVNwZWNpZmllZCIsInVwIiwicGFyc2UiLCJhcmdzIiwib3B0aW9ucyIsInNlcnZpY2VzIiwiXyIsImhhbmRsZXIiLCJjb25maWciLCJzZWxlY3RlZFNlcnZpY2VzIiwiY29tcG9zZSIsIlByb21pc2UiLCJhbGwiLCJ2YWx1ZXMiLCJtYXAiLCJjb21tYW5kIiwidXNhZ2UiLCJkZXNjcmlwdGlvbiIsImRldGFjaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLElBQUlDLFFBQVEsT0FBUixDQUFWO0FBQ0EsTUFBTUMsV0FBV0QsUUFBUSxVQUFSLENBQWpCO0FBQ0EsTUFBTUUsZ0JBQWdCRixRQUFRLDBCQUFSLENBQXRCO0FBQ0EsTUFBTUcscUJBQXFCSCxRQUFRLGlDQUFSLENBQTNCO0FBQ0EsTUFBTUksS0FBS0osUUFBUSxJQUFSLENBQVg7O0FBRUEsTUFBTUssUUFBUSxDQUFDQyxJQUFELEVBQU9DLE9BQVAsS0FBbUI7QUFDL0IsU0FBTyxFQUFDQyxVQUFVUCxTQUFTSyxJQUFULEVBQWVHLENBQTFCLEVBQVA7QUFDRCxDQUZEOztBQUlBLE1BQU1DLFVBQVUsQ0FBQ0YsUUFBRCxFQUFXRyxNQUFYLEVBQW1CTCxJQUFuQixLQUE0QjtBQUMxQyxRQUFNTSxtQkFBbUJULG1CQUFtQkcsS0FBS0UsUUFBeEIsRUFBa0NBLFFBQWxDLENBQXpCO0FBQ0EsU0FBT1QsRUFBRWMsT0FBRixDQUFVSixLQUFLSyxRQUFRQyxHQUFSLENBQVlOLENBQVosQ0FBZixFQUErQlYsRUFBRWlCLE1BQWpDLEVBQXlDakIsRUFBRWtCLEdBQUYsQ0FBTVIsS0FBS0wsR0FBR0ssQ0FBSCxFQUFNLEVBQU4sQ0FBWCxDQUF6QyxFQUFnRUcsZ0JBQWhFLENBQVA7QUFDRCxDQUhEOztBQUtBLE1BQU1NLFVBQVU7QUFDZEMsU0FBTyxrQkFETztBQUVkQyxlQUFhLDRCQUZDO0FBR2RiLFdBQVM7QUFDUGMsWUFBUW5CLGNBQWNtQjtBQURmLEdBSEs7QUFNZGhCLE9BTmM7QUFPZEs7QUFQYyxDQUFoQjs7QUFVQVksT0FBT0MsT0FBUCxHQUFpQkwsT0FBakIiLCJmaWxlIjoiY21kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUiA9IHJlcXVpcmUoJ3JhbWRhJylcbmNvbnN0IG1pbmltaXN0ID0gcmVxdWlyZSgnbWluaW1pc3QnKVxuY29uc3Qgc2hhcmVkT3B0aW9ucyA9IHJlcXVpcmUoJ34vbGliL3NoYXJlZC1vcHRpb25zJylcbmNvbnN0IHBpY2tJZkFueVNwZWNpZmllZCA9IHJlcXVpcmUoJ34vbGliL3BpY2staWYtYW55LXNwZWNpZmllZCcpXG5jb25zdCB1cCA9IHJlcXVpcmUoJy4vJylcblxuY29uc3QgcGFyc2UgPSAoYXJncywgb3B0aW9ucykgPT4ge1xuICByZXR1cm4ge3NlcnZpY2VzOiBtaW5pbWlzdChhcmdzKS5ffVxufVxuXG5jb25zdCBoYW5kbGVyID0gKHNlcnZpY2VzLCBjb25maWcsIGFyZ3MpID0+IHtcbiAgY29uc3Qgc2VsZWN0ZWRTZXJ2aWNlcyA9IHBpY2tJZkFueVNwZWNpZmllZChhcmdzLnNlcnZpY2VzLCBzZXJ2aWNlcylcbiAgcmV0dXJuIFIuY29tcG9zZShfID0+IFByb21pc2UuYWxsKF8pLCBSLnZhbHVlcywgUi5tYXAoXyA9PiB1cChfLCB7fSkpKShzZWxlY3RlZFNlcnZpY2VzKVxufVxuXG5jb25zdCBjb21tYW5kID0ge1xuICB1c2FnZTogJ3VwIFtzZXJ2aWNlcy4uLl0nLFxuICBkZXNjcmlwdGlvbjogJ2J1aWxkIGFuZCBzdGFydCBzZXJ2aWNlKHMpJyxcbiAgb3B0aW9uczoge1xuICAgIGRldGFjaDogc2hhcmVkT3B0aW9ucy5kZXRhY2hcbiAgfSxcbiAgcGFyc2UsXG4gIGhhbmRsZXJcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb21tYW5kXG4iXX0=