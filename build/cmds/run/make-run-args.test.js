const os = require('os');
const test = require('tape');
const makeArgs = require('./make-run-args');
const image = 'pmkr/hello:1.0';

test('throws if no image given', t => {
  t.plan(1);
  try {
    makeArgs({});
    t.fail("didn't throw");
  } catch (err) {
    t.pass('requires image');
  }
});

test('service.image', t => {
  t.plan(1);
  t.equal(makeArgs({ image }).join(' '), image);
});

test('service.env', t => {
  t.plan(1);
  const service = {
    image,
    env: {
      FOO: 'foo',
      BAR: 'bar bar'
    }
  };
  t.equal(makeArgs(service).join(' '), `-e FOO="foo" -e BAR="bar bar" ${ image }`);
});

test('service.volumes', t => {
  t.plan(1);
  const service = {
    image,
    volumes: ['foo:/app', '~/tmp:/tmp']
  };
  t.equal(makeArgs(service).join(' '), `-v ${ process.cwd() }/foo:/app -v ${ os.homedir() }/tmp:/tmp ${ image }`);
});

test('service.cmd', t => {
  t.plan(1);
  const service = {
    image,
    cmd: 'foo bar baz'
  };
  t.equal(makeArgs(service).join(' '), `${ image } foo bar baz`);
});

test('various', t => {
  t.plan(1);
  const service = {
    image,
    cmd: 'foo bar',
    net: 'host',
    env: {
      FOO: 'foo foo'
    },
    volumes: ['~/foo:/foo']
  };
  t.equal(makeArgs(service).join(' '), `--net host -e FOO="foo foo" -v ${ os.homedir() }/foo:/foo ${ image } foo bar`);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbWRzL3J1bi9tYWtlLXJ1bi1hcmdzLnRlc3QuanMiXSwibmFtZXMiOlsib3MiLCJyZXF1aXJlIiwidGVzdCIsIm1ha2VBcmdzIiwiaW1hZ2UiLCJ0IiwicGxhbiIsImZhaWwiLCJlcnIiLCJwYXNzIiwiZXF1YWwiLCJqb2luIiwic2VydmljZSIsImVudiIsIkZPTyIsIkJBUiIsInZvbHVtZXMiLCJwcm9jZXNzIiwiY3dkIiwiaG9tZWRpciIsImNtZCIsIm5ldCJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBS0MsUUFBUSxJQUFSLENBQVg7QUFDQSxNQUFNQyxPQUFPRCxRQUFRLE1BQVIsQ0FBYjtBQUNBLE1BQU1FLFdBQVdGLFFBQVEsaUJBQVIsQ0FBakI7QUFDQSxNQUFNRyxRQUFRLGdCQUFkOztBQUVBRixLQUFLLDBCQUFMLEVBQWlDRyxLQUFLO0FBQ3BDQSxJQUFFQyxJQUFGLENBQU8sQ0FBUDtBQUNBLE1BQUk7QUFDRkgsYUFBUyxFQUFUO0FBQ0FFLE1BQUVFLElBQUYsQ0FBTyxjQUFQO0FBQ0QsR0FIRCxDQUdFLE9BQU9DLEdBQVAsRUFBWTtBQUNaSCxNQUFFSSxJQUFGLENBQU8sZ0JBQVA7QUFDRDtBQUNGLENBUkQ7O0FBVUFQLEtBQUssZUFBTCxFQUFzQkcsS0FBSztBQUN6QkEsSUFBRUMsSUFBRixDQUFPLENBQVA7QUFDQUQsSUFBRUssS0FBRixDQUNFUCxTQUFTLEVBQUNDLEtBQUQsRUFBVCxFQUFrQk8sSUFBbEIsQ0FBdUIsR0FBdkIsQ0FERixFQUVFUCxLQUZGO0FBSUQsQ0FORDs7QUFRQUYsS0FBSyxhQUFMLEVBQW9CRyxLQUFLO0FBQ3ZCQSxJQUFFQyxJQUFGLENBQU8sQ0FBUDtBQUNBLFFBQU1NLFVBQVU7QUFDZFIsU0FEYztBQUVkUyxTQUFLO0FBQ0hDLFdBQUssS0FERjtBQUVIQyxXQUFLO0FBRkY7QUFGUyxHQUFoQjtBQU9BVixJQUFFSyxLQUFGLENBQ0VQLFNBQVNTLE9BQVQsRUFBa0JELElBQWxCLENBQXVCLEdBQXZCLENBREYsRUFFRyxrQ0FBZ0NQLEtBQU0sR0FGekM7QUFJRCxDQWJEOztBQWVBRixLQUFLLGlCQUFMLEVBQXdCRyxLQUFLO0FBQzNCQSxJQUFFQyxJQUFGLENBQU8sQ0FBUDtBQUNBLFFBQU1NLFVBQVU7QUFDZFIsU0FEYztBQUVkWSxhQUFTLENBQ1AsVUFETyxFQUVQLFlBRk87QUFGSyxHQUFoQjtBQU9BWCxJQUFFSyxLQUFGLENBQ0VQLFNBQVNTLE9BQVQsRUFBa0JELElBQWxCLENBQXVCLEdBQXZCLENBREYsRUFFRyxPQUFLTSxRQUFRQyxHQUFSLEVBQWMsa0JBQWVsQixHQUFHbUIsT0FBSCxFQUFhLGVBQVlmLEtBQU0sR0FGcEU7QUFJRCxDQWJEOztBQWVBRixLQUFLLGFBQUwsRUFBb0JHLEtBQUs7QUFDdkJBLElBQUVDLElBQUYsQ0FBTyxDQUFQO0FBQ0EsUUFBTU0sVUFBVTtBQUNkUixTQURjO0FBRWRnQixTQUFLO0FBRlMsR0FBaEI7QUFJQWYsSUFBRUssS0FBRixDQUNFUCxTQUFTUyxPQUFULEVBQWtCRCxJQUFsQixDQUF1QixHQUF2QixDQURGLEVBRUcsSUFBRVAsS0FBTSxlQUZYO0FBSUQsQ0FWRDs7QUFZQUYsS0FBSyxTQUFMLEVBQWdCRyxLQUFLO0FBQ25CQSxJQUFFQyxJQUFGLENBQU8sQ0FBUDtBQUNBLFFBQU1NLFVBQVU7QUFDZFIsU0FEYztBQUVkZ0IsU0FBSyxTQUZTO0FBR2RDLFNBQUssTUFIUztBQUlkUixTQUFLO0FBQ0hDLFdBQUs7QUFERixLQUpTO0FBT2RFLGFBQVMsQ0FDUCxZQURPO0FBUEssR0FBaEI7QUFXQVgsSUFBRUssS0FBRixDQUNFUCxTQUFTUyxPQUFULEVBQWtCRCxJQUFsQixDQUF1QixHQUF2QixDQURGLEVBRUcsbUNBQWlDWCxHQUFHbUIsT0FBSCxFQUFhLGVBQVlmLEtBQU0sV0FGbkU7QUFJRCxDQWpCRCIsImZpbGUiOiJtYWtlLXJ1bi1hcmdzLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBvcyA9IHJlcXVpcmUoJ29zJylcbmNvbnN0IHRlc3QgPSByZXF1aXJlKCd0YXBlJylcbmNvbnN0IG1ha2VBcmdzID0gcmVxdWlyZSgnLi9tYWtlLXJ1bi1hcmdzJylcbmNvbnN0IGltYWdlID0gJ3Bta3IvaGVsbG86MS4wJ1xuXG50ZXN0KCd0aHJvd3MgaWYgbm8gaW1hZ2UgZ2l2ZW4nLCB0ID0+IHtcbiAgdC5wbGFuKDEpXG4gIHRyeSB7XG4gICAgbWFrZUFyZ3Moe30pXG4gICAgdC5mYWlsKFwiZGlkbid0IHRocm93XCIpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHQucGFzcygncmVxdWlyZXMgaW1hZ2UnKVxuICB9XG59KVxuXG50ZXN0KCdzZXJ2aWNlLmltYWdlJywgdCA9PiB7XG4gIHQucGxhbigxKVxuICB0LmVxdWFsKFxuICAgIG1ha2VBcmdzKHtpbWFnZX0pLmpvaW4oJyAnKSxcbiAgICBpbWFnZVxuICApXG59KVxuXG50ZXN0KCdzZXJ2aWNlLmVudicsIHQgPT4ge1xuICB0LnBsYW4oMSlcbiAgY29uc3Qgc2VydmljZSA9IHtcbiAgICBpbWFnZSxcbiAgICBlbnY6IHtcbiAgICAgIEZPTzogJ2ZvbycsXG4gICAgICBCQVI6ICdiYXIgYmFyJ1xuICAgIH1cbiAgfVxuICB0LmVxdWFsKFxuICAgIG1ha2VBcmdzKHNlcnZpY2UpLmpvaW4oJyAnKSxcbiAgICBgLWUgRk9PPVwiZm9vXCIgLWUgQkFSPVwiYmFyIGJhclwiICR7aW1hZ2V9YFxuICApXG59KVxuXG50ZXN0KCdzZXJ2aWNlLnZvbHVtZXMnLCB0ID0+IHtcbiAgdC5wbGFuKDEpXG4gIGNvbnN0IHNlcnZpY2UgPSB7XG4gICAgaW1hZ2UsXG4gICAgdm9sdW1lczogW1xuICAgICAgJ2ZvbzovYXBwJyxcbiAgICAgICd+L3RtcDovdG1wJ1xuICAgIF1cbiAgfVxuICB0LmVxdWFsKFxuICAgIG1ha2VBcmdzKHNlcnZpY2UpLmpvaW4oJyAnKSxcbiAgICBgLXYgJHtwcm9jZXNzLmN3ZCgpfS9mb286L2FwcCAtdiAke29zLmhvbWVkaXIoKX0vdG1wOi90bXAgJHtpbWFnZX1gXG4gIClcbn0pXG5cbnRlc3QoJ3NlcnZpY2UuY21kJywgdCA9PiB7XG4gIHQucGxhbigxKVxuICBjb25zdCBzZXJ2aWNlID0ge1xuICAgIGltYWdlLFxuICAgIGNtZDogJ2ZvbyBiYXIgYmF6J1xuICB9XG4gIHQuZXF1YWwoXG4gICAgbWFrZUFyZ3Moc2VydmljZSkuam9pbignICcpLFxuICAgIGAke2ltYWdlfSBmb28gYmFyIGJhemBcbiAgKVxufSlcblxudGVzdCgndmFyaW91cycsIHQgPT4ge1xuICB0LnBsYW4oMSlcbiAgY29uc3Qgc2VydmljZSA9IHtcbiAgICBpbWFnZSxcbiAgICBjbWQ6ICdmb28gYmFyJyxcbiAgICBuZXQ6ICdob3N0JyxcbiAgICBlbnY6IHtcbiAgICAgIEZPTzogJ2ZvbyBmb28nXG4gICAgfSxcbiAgICB2b2x1bWVzOiBbXG4gICAgICAnfi9mb286L2ZvbycsXG4gICAgXVxuICB9XG4gIHQuZXF1YWwoXG4gICAgbWFrZUFyZ3Moc2VydmljZSkuam9pbignICcpLFxuICAgIGAtLW5ldCBob3N0IC1lIEZPTz1cImZvbyBmb29cIiAtdiAke29zLmhvbWVkaXIoKX0vZm9vOi9mb28gJHtpbWFnZX0gZm9vIGJhcmBcbiAgKVxufSlcbiJdfQ==