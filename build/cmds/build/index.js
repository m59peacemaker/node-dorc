function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const R = require('ramda');

var _require = require('child_process');

const spawn = _require.spawn,
      exec = _require.exec;

const format = require('chalk');
const split = require('split');
const prefixLines = require('prefix-stream-lines');
const through = require('throo');
const docker = require('../../lib/docker-api');
const prepareServices = require('./prepare-services');
const SpawnMock = require('mock-spawn');
const spawnMock = SpawnMock(cp => cp.end());

const color = c => {
  return through((push, chunk, enc, cb) => {
    push(format[c](chunk) + '\n');
    cb();
  });
};

const BuildImage = work => {
  return ({ file, context = './', tags = [], args = [] }) => {
    const tagArgs = R.flatten(tags.map(tag => ['-t', tag]));
    const buildArgs = R.pipe(R.toPairs, R.map(([key, value]) => ['--build-arg', `${ key }=${ value }`]), R.flatten)(args);
    const dockerArgs = ['build', ...tagArgs, ...buildArgs, '-f', file, context];
    console.log(dockerArgs);
    work.info(`  > docker ${ dockerArgs.join(' ') }`);
    return spawn('docker', dockerArgs);
    return work.do('spawn', 'docker', dockerArgs);
  };
};

const RemoveDangling = work => {
  return images => Promise.all(images.map(image => docker.getImage(image.Id).then(info => {
    if (!info.RepoTags.length) {
      // no longer tagged (is dangling)
      work.info(`Removing dangling image ${ info.Id }, previously tagged "${ image.RepoTags.join(' ') }"`);
      return work.do('rmi', info.Id).then(() => work.info(`Image ${ info.Id } removed`));
    }
    return Promise.resolve();
  })));
};

const getImagesThatMatch = tags => Promise.all(tags.map(tag => docker.getImage(tag).catch(err => undefined)).filter(v => v !== undefined));

const promisifyProcess = process => new Promise((resolve, reject) => {
  process.on('error', reject);
  process.on('close', exitCode => exitCode !== 0 ? reject({ exitCode }) : resolve({ exitCode }));
});

const BuildImageAndRemoveDangling = work => {
  return (() => {
    var _ref = _asyncToGenerator(function* (serviceName, image) {
      const imagesThatMatchTags = yield getImagesThatMatch(image.tags);
      const process = BuildImage(work)(serviceName, image);
      process.stdout.on('data', function (d) {
        return work.info(d, serviceName);
      });
      process.stderr.on('data', function (d) {
        return work.err(d, serviceName);
      });
      yield promisifyProcess(process);
      yield RemoveDangling(work)(imagesThatMatchTags);
    });

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })();
};

const BuildImages = Work => {
  return R.pipe(R.toPairs, R.map(([name, images]) => images.reduce((promise, image) => promise.then(() => BuildImageAndRemoveDangling(Work(name))(name, image)), Promise.resolve())), promises => Promise.all(promises));
};

const validateImage = image => {
  if (!(image.file && image.file.length)) {
    throw new Error(`no Dockerfile path given for "${ name }" service image`);
  }
};

const validateImages = toBuild => R.pipe(R.values, R.flatten, R.map(validateImage));

const actions = {
  rmi: docker.rmi,
  spawn
};

const dryActions = {
  rmi: () => Promise.resolve(),
  spawn: spawnMock
};

const build = (selectedServices, config, args) => {
  const Work = name => {
    const infoStream = through();
    infoStream.pipe(split()).pipe(color('yellow')).pipe(prefixLines(`${ name } | `)).pipe(process.stdout);
    const errStream = through().pipe(split()).pipe(color('red')).pipe(prefixLines(`${ name } | `)).pipe(process.stderr);
    return {
      do: (action, ...a) => {
        if (args.dry) {
          dryActions[action](...a);
        } else {
          actions[action](...a);
        }
      },
      info: d => infoStream.push(d),
      err: d => errStream.push(d)
    };
  };
  const toBuild = prepareServices(selectedServices);
  validateImages(toBuild);
  return BuildImages(Work)(toBuild);
};

module.exports = build;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbWRzL2J1aWxkL2luZGV4LmpzIl0sIm5hbWVzIjpbIlIiLCJyZXF1aXJlIiwic3Bhd24iLCJleGVjIiwiZm9ybWF0Iiwic3BsaXQiLCJwcmVmaXhMaW5lcyIsInRocm91Z2giLCJkb2NrZXIiLCJwcmVwYXJlU2VydmljZXMiLCJTcGF3bk1vY2siLCJzcGF3bk1vY2siLCJjcCIsImVuZCIsImNvbG9yIiwiYyIsInB1c2giLCJjaHVuayIsImVuYyIsImNiIiwiQnVpbGRJbWFnZSIsIndvcmsiLCJmaWxlIiwiY29udGV4dCIsInRhZ3MiLCJhcmdzIiwidGFnQXJncyIsImZsYXR0ZW4iLCJtYXAiLCJ0YWciLCJidWlsZEFyZ3MiLCJwaXBlIiwidG9QYWlycyIsImtleSIsInZhbHVlIiwiZG9ja2VyQXJncyIsImNvbnNvbGUiLCJsb2ciLCJpbmZvIiwiam9pbiIsImRvIiwiUmVtb3ZlRGFuZ2xpbmciLCJpbWFnZXMiLCJQcm9taXNlIiwiYWxsIiwiaW1hZ2UiLCJnZXRJbWFnZSIsIklkIiwidGhlbiIsIlJlcG9UYWdzIiwibGVuZ3RoIiwicmVzb2x2ZSIsImdldEltYWdlc1RoYXRNYXRjaCIsImNhdGNoIiwiZXJyIiwidW5kZWZpbmVkIiwiZmlsdGVyIiwidiIsInByb21pc2lmeVByb2Nlc3MiLCJwcm9jZXNzIiwicmVqZWN0Iiwib24iLCJleGl0Q29kZSIsIkJ1aWxkSW1hZ2VBbmRSZW1vdmVEYW5nbGluZyIsInNlcnZpY2VOYW1lIiwiaW1hZ2VzVGhhdE1hdGNoVGFncyIsInN0ZG91dCIsImQiLCJzdGRlcnIiLCJCdWlsZEltYWdlcyIsIldvcmsiLCJuYW1lIiwicmVkdWNlIiwicHJvbWlzZSIsInByb21pc2VzIiwidmFsaWRhdGVJbWFnZSIsIkVycm9yIiwidmFsaWRhdGVJbWFnZXMiLCJ0b0J1aWxkIiwidmFsdWVzIiwiYWN0aW9ucyIsInJtaSIsImRyeUFjdGlvbnMiLCJidWlsZCIsInNlbGVjdGVkU2VydmljZXMiLCJjb25maWci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cXVpcmUoJ3JhbWRhJylcbmNvbnN0IHtzcGF3biwgZXhlY30gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJylcbmNvbnN0IGZvcm1hdCA9IHJlcXVpcmUoJ2NoYWxrJylcbmNvbnN0IHNwbGl0ID0gcmVxdWlyZSgnc3BsaXQnKVxuY29uc3QgcHJlZml4TGluZXMgPSByZXF1aXJlKCdwcmVmaXgtc3RyZWFtLWxpbmVzJylcbmNvbnN0IHRocm91Z2ggPSByZXF1aXJlKCd0aHJvbycpXG5jb25zdCBkb2NrZXIgPSByZXF1aXJlKCd+L2xpYi9kb2NrZXItYXBpJylcbmNvbnN0IHByZXBhcmVTZXJ2aWNlcyA9IHJlcXVpcmUoJy4vcHJlcGFyZS1zZXJ2aWNlcycpXG5jb25zdCBTcGF3bk1vY2sgPSByZXF1aXJlKCdtb2NrLXNwYXduJylcbmNvbnN0IHNwYXduTW9jayA9IFNwYXduTW9jayhjcCA9PiBjcC5lbmQoKSlcblxuY29uc3QgY29sb3IgPSAoYykgPT4ge1xuICByZXR1cm4gdGhyb3VnaCgocHVzaCwgY2h1bmssIGVuYywgY2IpID0+IHtcbiAgICBwdXNoKGZvcm1hdFtjXShjaHVuaykgKyAnXFxuJylcbiAgICBjYigpXG4gIH0pXG59XG5cbmNvbnN0IEJ1aWxkSW1hZ2UgPSB3b3JrID0+IHtcbiAgcmV0dXJuICh7ZmlsZSwgY29udGV4dCA9ICcuLycsIHRhZ3MgPSBbXSwgYXJncyA9IFtdfSkgPT4ge1xuICAgIGNvbnN0IHRhZ0FyZ3MgPSBSLmZsYXR0ZW4odGFncy5tYXAodGFnID0+IFsnLXQnLCB0YWddKSlcbiAgICBjb25zdCBidWlsZEFyZ3MgPSBSLnBpcGUoXG4gICAgICBSLnRvUGFpcnMsXG4gICAgICBSLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBbJy0tYnVpbGQtYXJnJywgYCR7a2V5fT0ke3ZhbHVlfWBdKSxcbiAgICAgIFIuZmxhdHRlblxuICAgICkoYXJncylcbiAgICBjb25zdCBkb2NrZXJBcmdzID0gWydidWlsZCcsIC4uLnRhZ0FyZ3MsIC4uLmJ1aWxkQXJncywgJy1mJywgZmlsZSwgY29udGV4dF1cbiAgICBjb25zb2xlLmxvZyhkb2NrZXJBcmdzKVxuICAgIHdvcmsuaW5mbyhgICA+IGRvY2tlciAke2RvY2tlckFyZ3Muam9pbignICcpfWApXG4gICAgcmV0dXJuIHNwYXduKCdkb2NrZXInLCBkb2NrZXJBcmdzKVxuICAgIHJldHVybiB3b3JrLmRvKCdzcGF3bicsICdkb2NrZXInLCBkb2NrZXJBcmdzKVxuICB9XG59XG5cbmNvbnN0IFJlbW92ZURhbmdsaW5nID0gd29yayA9PiB7XG4gIHJldHVybiBpbWFnZXMgPT4gUHJvbWlzZS5hbGwoXG4gICAgaW1hZ2VzLm1hcChpbWFnZSA9PiBkb2NrZXIuZ2V0SW1hZ2UoaW1hZ2UuSWQpXG4gICAgICAudGhlbihpbmZvID0+IHtcbiAgICAgICAgaWYgKCFpbmZvLlJlcG9UYWdzLmxlbmd0aCkgeyAvLyBubyBsb25nZXIgdGFnZ2VkIChpcyBkYW5nbGluZylcbiAgICAgICAgICB3b3JrLmluZm8oXG4gICAgICAgICAgICBgUmVtb3ZpbmcgZGFuZ2xpbmcgaW1hZ2UgJHtpbmZvLklkfSwgcHJldmlvdXNseSB0YWdnZWQgXCIke2ltYWdlLlJlcG9UYWdzLmpvaW4oJyAnKX1cImBcbiAgICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIHdvcmsuZG8oJ3JtaScsIGluZm8uSWQpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB3b3JrLmluZm8oYEltYWdlICR7aW5mby5JZH0gcmVtb3ZlZGApKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgfSlcbiAgICApXG4gIClcbn1cblxuY29uc3QgZ2V0SW1hZ2VzVGhhdE1hdGNoID0gdGFncyA9PiBQcm9taXNlLmFsbChcbiAgdGFnc1xuICAgIC5tYXAodGFnID0+IGRvY2tlci5nZXRJbWFnZSh0YWcpLmNhdGNoKGVyciA9PiB1bmRlZmluZWQpKVxuICAgIC5maWx0ZXIodiA9PiB2ICE9PSB1bmRlZmluZWQpXG4pXG5cbmNvbnN0IHByb21pc2lmeVByb2Nlc3MgPSBwcm9jZXNzID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgcHJvY2Vzcy5vbignZXJyb3InLCByZWplY3QpXG4gIHByb2Nlc3Mub24oJ2Nsb3NlJywgZXhpdENvZGUgPT4gZXhpdENvZGUgIT09IDAgPyByZWplY3Qoe2V4aXRDb2RlfSkgOiByZXNvbHZlKHtleGl0Q29kZX0pKVxufSlcblxuY29uc3QgQnVpbGRJbWFnZUFuZFJlbW92ZURhbmdsaW5nID0gd29yayA9PiB7XG4gIHJldHVybiBhc3luYyAoc2VydmljZU5hbWUsIGltYWdlKSA9PiB7XG4gICAgY29uc3QgaW1hZ2VzVGhhdE1hdGNoVGFncyA9IGF3YWl0IGdldEltYWdlc1RoYXRNYXRjaChpbWFnZS50YWdzKVxuICAgIGNvbnN0IHByb2Nlc3MgPSBCdWlsZEltYWdlKHdvcmspKHNlcnZpY2VOYW1lLCBpbWFnZSlcbiAgICBwcm9jZXNzLnN0ZG91dC5vbignZGF0YScsIGQgPT4gd29yay5pbmZvKGQsIHNlcnZpY2VOYW1lKSlcbiAgICBwcm9jZXNzLnN0ZGVyci5vbignZGF0YScsIGQgPT4gd29yay5lcnIoZCwgc2VydmljZU5hbWUpKVxuICAgIGF3YWl0IHByb21pc2lmeVByb2Nlc3MocHJvY2VzcylcbiAgICBhd2FpdCBSZW1vdmVEYW5nbGluZyh3b3JrKShpbWFnZXNUaGF0TWF0Y2hUYWdzKVxuICB9XG59XG5cbmNvbnN0IEJ1aWxkSW1hZ2VzID0gV29yayA9PiB7XG4gIHJldHVybiBSLnBpcGUoXG4gICAgUi50b1BhaXJzLFxuICAgIFIubWFwKChbbmFtZSwgaW1hZ2VzXSkgPT4gaW1hZ2VzLnJlZHVjZShcbiAgICAgIChwcm9taXNlLCBpbWFnZSkgPT4gcHJvbWlzZS50aGVuKCgpID0+IEJ1aWxkSW1hZ2VBbmRSZW1vdmVEYW5nbGluZyhXb3JrKG5hbWUpKShuYW1lLCBpbWFnZSkpLFxuICAgICAgUHJvbWlzZS5yZXNvbHZlKClcbiAgICApKSxcbiAgICBwcm9taXNlcyA9PiBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgKVxufVxuXG5jb25zdCB2YWxpZGF0ZUltYWdlID0gaW1hZ2UgPT4ge1xuICBpZiAoIShpbWFnZS5maWxlICYmIGltYWdlLmZpbGUubGVuZ3RoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgbm8gRG9ja2VyZmlsZSBwYXRoIGdpdmVuIGZvciBcIiR7bmFtZX1cIiBzZXJ2aWNlIGltYWdlYClcbiAgfVxufVxuXG5jb25zdCB2YWxpZGF0ZUltYWdlcyA9IHRvQnVpbGQgPT4gUi5waXBlKFIudmFsdWVzLCBSLmZsYXR0ZW4sIFIubWFwKHZhbGlkYXRlSW1hZ2UpKVxuXG5jb25zdCBhY3Rpb25zID0ge1xuICBybWk6IGRvY2tlci5ybWksXG4gIHNwYXduXG59XG5cbmNvbnN0IGRyeUFjdGlvbnMgPSB7XG4gIHJtaTogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCksXG4gIHNwYXduOiBzcGF3bk1vY2tcbn1cblxuY29uc3QgYnVpbGQgPSAoc2VsZWN0ZWRTZXJ2aWNlcywgY29uZmlnLCBhcmdzKSA9PiB7XG4gIGNvbnN0IFdvcmsgPSBuYW1lID0+IHtcbiAgICBjb25zdCBpbmZvU3RyZWFtID0gdGhyb3VnaCgpXG4gICAgaW5mb1N0cmVhbVxuICAgICAgLnBpcGUoc3BsaXQoKSlcbiAgICAgIC5waXBlKGNvbG9yKCd5ZWxsb3cnKSlcbiAgICAgIC5waXBlKHByZWZpeExpbmVzKGAke25hbWV9IHwgYCkpXG4gICAgICAucGlwZShwcm9jZXNzLnN0ZG91dClcbiAgICBjb25zdCBlcnJTdHJlYW0gPSB0aHJvdWdoKClcbiAgICAgIC5waXBlKHNwbGl0KCkpXG4gICAgICAucGlwZShjb2xvcigncmVkJykpXG4gICAgICAucGlwZShwcmVmaXhMaW5lcyhgJHtuYW1lfSB8IGApKVxuICAgICAgLnBpcGUocHJvY2Vzcy5zdGRlcnIpXG4gICAgcmV0dXJuICh7XG4gICAgICBkbzogKGFjdGlvbiwgLi4uYSkgPT4ge1xuICAgICAgICBpZiAoYXJncy5kcnkpIHtcbiAgICAgICAgICBkcnlBY3Rpb25zW2FjdGlvbl0oLi4uYSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhY3Rpb25zW2FjdGlvbl0oLi4uYSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGluZm86IGQgPT4gaW5mb1N0cmVhbS5wdXNoKGQpLFxuICAgICAgZXJyOiBkID0+IGVyclN0cmVhbS5wdXNoKGQpXG4gICAgfSlcbiAgfVxuICBjb25zdCB0b0J1aWxkID0gcHJlcGFyZVNlcnZpY2VzKHNlbGVjdGVkU2VydmljZXMpXG4gIHZhbGlkYXRlSW1hZ2VzKHRvQnVpbGQpXG4gIHJldHVybiBCdWlsZEltYWdlcyhXb3JrKSh0b0J1aWxkKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ1aWxkXG4iXX0=